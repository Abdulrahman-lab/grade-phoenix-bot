# Cursor Project Rules (Auto-Apply)

---
description: Always apply these rules for all PHP, Python, and bot development in this project. These rules enforce code quality, best practices, and agent behavior for all file edits, code generation, and refactoring. They are always active and must be followed by the Cursor Agent without explicit user reference.
globs: *
---

## PHP Coding Standards
- All PHP code must use PSR-12 formatting and naming conventions.
- Use PHP 7.4 features where appropriate.
- All classes and methods must use descriptive names and follow SOLID principles.
- Use dependency injection and DI containers for all services and controllers.
- Always implement proper error handling with try-catch blocks for expected exceptions.
- Never duplicate code; prefer modularization and iteration.
- All new PHP files must include a file-level docblock.
- All public methods must have docblocks describing parameters and return values.

## Python & Bot Development
- Use the standard logging module for all debug, info, warning, and error output.
- Configure logging to output to both console and a file named 'bot.log'.
- Use DEBUG level for development, INFO or higher for production.
- Never log sensitive information (passwords, tokens, etc).
- All scripts must use environment variables or config files for credentials, not hardcoded secrets.
- All database queries for debugging must be read-only unless explicitly required.
- Utility scripts must be placed in a 'scripts/' or 'tools/' directory and documented with usage instructions at the top.

## General Agent Behavior
- Always apply these rules automatically to all code generation, edits, and refactoring.
- Never require explicit user reference to apply these rules.
- When generating or editing code, always check for existing rules and update them if needed.
- Respond with a summary of which rules were applied after each major action.

## Examples
<example>
// Good: PHP class with PSR-12 formatting, SOLID, DI, and docblocks
class UserService {
    /**
     * Get user by ID.
     * @param int $id
     * @return User|null
     */
    public function getUserById(int $id): ?User {
        // ...
    }
}
</example>
<example type="invalid">
// Bad: PHP class with no docblocks, procedural code, no DI
function get_user($id) {
    // ...
}
</example>

