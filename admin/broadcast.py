"""
ðŸ”” Broadcast System (Corrected Version)
"""
import logging
from telegram import Update
from telegram.ext import CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
from config import CONFIG

logger = logging.getLogger(__name__)

BROADCAST_MESSAGE = range(1)

class BroadcastSystem:
    """Handles sending messages to all users."""

    def __init__(self, bot):
        self.bot = bot
        # Now it correctly accesses the bot's user_storage
        self.user_storage = self.bot.user_storage

    def get_conversation_handler(self):
        return ConversationHandler(
            entry_points=[CommandHandler("broadcast", self.start_broadcast)],
            states={
                BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.send_broadcast)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel_broadcast)],
        )

    async def start_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id != CONFIG["ADMIN_ID"]:
            await update.message.reply_text("ðŸš« Ù„ÙŠØ³ Ù„Ø¯ÙŠÙƒ ØµÙ„Ø§Ø­ÙŠØ© Ù„Ø§Ø³ØªØ®Ø¯Ø§Ù… Ù‡Ø°Ù‡ Ø§Ù„Ù…ÙŠØ²Ø©.")
            return ConversationHandler.END
        
        await update.message.reply_text("Ø£Ø±Ø³Ù„ Ø§Ù„Ø±Ø³Ø§Ù„Ø© Ø§Ù„ØªÙŠ ØªØ±ÙŠØ¯ Ø¨Ø«Ù‡Ø§ Ù„Ù„Ø¬Ù…ÙŠØ¹. Ù„Ù„Ø¥Ù„ØºØ§Ø¡ØŒ Ø§Ø³ØªØ®Ø¯Ù… /cancel.")
        return BROADCAST_MESSAGE

    async def send_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id != CONFIG["ADMIN_ID"]:
            await update.message.reply_text("ðŸš« Ù„ÙŠØ³ Ù„Ø¯ÙŠÙƒ ØµÙ„Ø§Ø­ÙŠØ© Ù„Ø§Ø³ØªØ®Ø¯Ø§Ù… Ù‡Ø°Ù‡ Ø§Ù„Ù…ÙŠØ²Ø©.")
            return ConversationHandler.END
        
        message_text = update.message.text
        active_users = self.user_storage.get_active_users() # This line will now work
        sent_count = 0
        
        for user in active_users:
            try:
                await self.bot.app.bot.send_message(chat_id=user["telegram_id"], text=message_text)
                sent_count += 1
            except Exception as e:
                logger.error(f"Failed to send broadcast to {user['telegram_id']}: {e}")

        await update.message.reply_text(f"âœ… ØªÙ… Ø¥Ø±Ø³Ø§Ù„ Ø§Ù„Ø±Ø³Ø§Ù„Ø© Ø¨Ù†Ø¬Ø§Ø­ Ø¥Ù„Ù‰ {sent_count} Ù…Ù† Ø£ØµÙ„ {len(active_users)} Ù…Ø³ØªØ®Ø¯Ù….")
        return ConversationHandler.END

    async def cancel_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("ØªÙ… Ø¥Ù„ØºØ§Ø¡ Ø¹Ù…Ù„ÙŠØ© Ø§Ù„Ø¨Ø«.")
        return ConversationHandler.END